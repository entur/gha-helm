---
name: Entur/Helm/Deploy

on:
  workflow_call:
    inputs:
      image:
        description: "The image to deploy, on the form app:tag. Use `na` value to skip replacing the image version in the helm config."
        required: true
        type: string
      cloud_provider:
        description: "Which cloud service provider to use - Google Cloud: 'gcp' or Azure: 'az'"
        type: string
        default: "gcp"
      environment:
        type: string
        description: "GitHub environment to use Google Cloud: (dev, tst, prd) or Azure: (az-dev, az-test, az-prod)"
        required: true
      chart:
        description: "The chart, defaults to `helm/$repository_name`"
        type: string
        default: "repo_name"
      values:
        description: "The values file in `./helm/$app/env/`, default `$environment.yaml`"
        type: string
        default: "values"
      release_name:
        description: "The release name, defaults to repository name"
        type: string
        default: "repo_name"
      namespace:
        description: "The namespace to use, defaults to repository name"
        type: string
        default: "repo_name"
      project_id:
        type: string
        description: "Do not use this input"
      cluster_name:
        type: string
        description: "Do not use this input"
      timeout_minutes:
        description: "Job timeout in minutes. Minimum is 3 minutes. Default is 15 minutes."
        type: number
        default: 5
jobs:
  helm-deploy:
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ inputs.timeout_minutes }}
    name: Helm deploy
    environment: ${{ inputs.environment }}
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    env:
      GHA_HELM_DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
      GHA_HELM_DEPLOY_IMAGE: ${{ inputs.image }}
      GHA_HELM_DEPLOY_CLOUD_PROVIDER: ${{ inputs.cloud_provider }}
      GHA_HELM_DEPLOY_RELEASE_NAME: ${{ inputs.release_name }}
      GHA_HELM_DEPLOY_CHART: ${{ inputs.chart }}
      GHA_HELM_DEPLOY_VALUES: ${{ inputs.values }}
      GHA_HELM_DEPLOY_NAMESPACE: ${{ inputs.namespace }}
      GHA_HELM_DEPLOY_ENV: ${{inputs.environment }}
      GHA_HELM_DEPLOY_REGISTRY: eu.gcr.io/entur-system-1287
      GHA_HELM_DEPLOY_CLUSTER_NAME: ${{ inputs.cluster_name }}
      # ignore "context access might be invalid" warning
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ vars.SERVICE_ACCOUNT }}
      GCP_PROJECT_ID: ${{ inputs.project_id }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLUSTER_NAME: ${{ vars.AZURE_CLUSTER_NAME  }}
      AZURE_CLUSTER_RESOURCE_GROUP: ${{ vars.AZURE_CLUSTER_RESOURCE_GROUP }}
    steps:
      - id: verify-cloud-provider
        if: env.GHA_HELM_DEPLOY_CLOUD_PROVIDER != 'gcp' && env.GHA_HELM_DEPLOY_CLOUD_PROVIDER != 'az'
        shell: bash
        run: |
          echo "Invalid cloud provider input: ${GHA_HELM_DEPLOY_CLOUD_PROVIDER}"
          echo "Valid options are: 'gcp' or 'az'"
          exit 1
      - id: set-release-name
        if: env.GHA_HELM_DEPLOY_RELEASE_NAME == 'repo_name'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_RELEASE_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - id: set-chart-name
        if: env.GHA_HELM_DEPLOY_CHART == 'repo_name'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_CHART=helm/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - id: set-namespace
        if: env.GHA_HELM_DEPLOY_NAMESPACE == 'repo_name'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_NAMESPACE=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - id: set-values-file
        if: env.GHA_HELM_DEPLOY_VALUES == 'values'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_VALUES=values-kub-ent-${GHA_HELM_DEPLOY_ENV}.yaml" >> $GITHUB_ENV
      - id: set-registry-azure
        if: env.GHA_HELM_DEPLOY_CLOUD_PROVIDER == 'az'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_REGISTRY=acrentur001.azurecr.io/entur" >> $GITHUB_ENV
      - id: verify-clustername-az
        name: Verify Cluster Name Azure
        shell: bash
        if: inputs.cloud_provider == 'az' && !env.AZURE_CLUSTER_NAME
        run: |
          echo "GitHub repository environment variable AZURE_CLUSTER_NAME is not set. Setup using tf-azure-apps. Exiting."
          exit 1
      - uses: actions/checkout@v4.1.7
      - id: install
        uses: azure/setup-helm@v4
      - uses: entur/gha-meta/.github/actions/cloud-auth@v1
        with:
          environment: ${{ env.GHA_HELM_DEPLOY_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_HELM_DEPLOY_CLOUD_PROVIDER }}
          gcp_workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          gcp_service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          azure_client_id: ${{ env.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ env.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - uses: entur/gha-meta/.github/actions/k8s-auth@v1
        with:
          environment: ${{ env.GHA_HELM_DEPLOY_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_HELM_DEPLOY_CLOUD_PROVIDER }}
          gcp_project_id: ${{ inputs.project_id }}
          gcp_cluster_name: ${{ env.GHA_HELM_DEPLOY_CLUSTER_NAME }}
          azure_cluster_resource_group: ${{ env.AZURE_CLUSTER_RESOURCE_GROUP }}
          azure_cluster_name: ${{ env.AZURE_CLUSTER_NAME }}
          azure_token: ${{ secrets.GITHUB_TOKEN }}
      - id: deploy-given-tag
        name: Helm deploy ./${{ env.GHA_HELM_DEPLOY_CHART }}
        env:
          TIMEOUT: ${{ inputs.timeout_minutes }}
        shell: bash
        run: |
          TIMEOUT=$((TIMEOUT-2))
          helm dependency update ./${GHA_HELM_DEPLOY_CHART}
          declare -a IMAGE_REPLACE_ARG
          if [ "${GHA_HELM_DEPLOY_IMAGE}" != "na" ]; then
            echo "Setting new image: ${GHA_HELM_DEPLOY_IMAGE}"
            IMAGE_REPLACE_ARG+=("--set ")
            IMAGE_REPLACE_ARG+=("common.container.image=\"${GHA_HELM_DEPLOY_REGISTRY}/${GHA_HELM_DEPLOY_IMAGE}\"")
          fi
          # Deploy the Helm chart
          if helm upgrade "${GHA_HELM_DEPLOY_RELEASE_NAME}" "./${GHA_HELM_DEPLOY_CHART}" \
            -f "${GHA_HELM_DEPLOY_CHART}/env/${GHA_HELM_DEPLOY_VALUES}" \
            --namespace "${GHA_HELM_DEPLOY_NAMESPACE}" \
            --install \
            --wait \
            --timeout "${TIMEOUT}m0s" \
            --debug \
            "${IMAGE_REPLACE_ARG[@]}"
          then
            echo "Helm upgrade/install successful...."
          else
            # check if we have previous Helm release
            if helm list -n "${GHA_HELM_DEPLOY_NAMESPACE}" | grep -q "${GHA_HELM_DEPLOY_RELEASE_NAME}"
            then
              echo "Helm upgrade/install failed. Rolling back to the previous version:"
              if helm rollback "${GHA_HELM_DEPLOY_RELEASE_NAME}" --namespace "${GHA_HELM_DEPLOY_NAMESPACE}" --wait --timeout "${TIMEOUT}m0s" --debug
              then
                echo "Helm rollback completed..."
                echo "Action Required: Check your deployment on the K8s cluster to understand why it rolled back."
                # We exit with a non-zero status code to indicate pipeline failure
                exit 1
              else
                echo "Helm Rollback also failed ... please investigate manually"
                exit 99
              fi
            else
              echo "Helm upgrade/install failed, but no previous Helm release found. Exiting..."
              exit 1
            fi
          fi
