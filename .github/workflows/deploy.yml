name: Entur/Helm/Deploy

on:
  workflow_call:
    inputs:
      image:
        description: "The image to deploy, on the form app:tag. Use `na` value to skip replacing the image version in the helm configuration."
        required: true
        type: string
      cloud_provider:
        description: "Which cloud service provider to use - Google Cloud: 'gcp' or Azure: 'az'"
        type: string
        default: "gcp"
      environment:
        type: string
        description: "GitHub environment to use Google Cloud: (dev, tst, prd) or Azure: (az-dev, az-test, az-prod)"
        required: true
      chart:
        description: "The chart, defaults to `helm/$repository_name`"
        type: string
        default: "repo_name"
      values:
        description: "The values file in `./helm/$app/env/`, default `$environment.yaml`"
        type: string
        default: "values"
      release_name:
        description: "The release name, defaults to repository name"
        type: string
        default: "repo_name"
      namespace:
        description: "The namespace to use, defaults to repository name"
        type: string
        default: "repo_name"
      project_id:
        type: string
        description: "Do not use this input"
      cluster_name:
        type: string
        description: "Do not use this input"
      timeout_minutes:
        description: "Job timeout in minutes"
        type: number
        default: 15
jobs:
  helm-deploy:
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ inputs.timeout_minutes }}
    name: Helm deploy
    environment: ${{ inputs.environment }}
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    env:
      GHA_HELM_DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
      GHA_HELM_DEPLOY_IMAGE: ${{ inputs.image }}
      GHA_HELM_DEPLOY_CLOUD_PROVIDER: ${{ inputs.cloud_provider }}
      GHA_HELM_DEPLOY_RELEASE_NAME: ${{ inputs.release_name }}
      GHA_HELM_DEPLOY_CHART: ${{ inputs.chart }}
      GHA_HELM_DEPLOY_VALUES: ${{ inputs.values }}
      GHA_HELM_DEPLOY_NAMESPACE: ${{ inputs.namespace }}
      GHA_HELM_DEPLOY_ENV: ${{inputs.environment }}
      GHA_HELM_DEPLOY_REGISTRY: eu.gcr.io/entur-system-1287
      GHA_HELM_DEPLOY_CLUSTER_NAME: ${{ inputs.cluster_name }}
      # ignore "context access might be invalid" warning
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ vars.SERVICE_ACCOUNT }}
      GCP_PROJECT_ID: ${{ inputs.project_id }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLUSTER_NAME: ${{ vars.AZURE_CLUSTER_NAME  }}
      AZURE_CLUSTER_RESOURCE_GROUP: ${{ vars.AZURE_CLUSTER_RESOURCE_GROUP }}
    steps:
      - id: verify-cloud-provider
        if: env.GHA_HELM_DEPLOY_CLOUD_PROVIDER != 'gcp' && env.GHA_HELM_DEPLOY_CLOUD_PROVIDER != 'az'
        shell: bash
        run: |
          echo "Invalid cloud provider input: ${GHA_HELM_DEPLOY_CLOUD_PROVIDER}"
          echo "Valid options are: 'gcp' or 'az'"
          exit 1
      - id: set-release-name
        if: env.GHA_HELM_DEPLOY_RELEASE_NAME == 'repo_name'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_RELEASE_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - id: set-chart-name
        if: env.GHA_HELM_DEPLOY_CHART == 'repo_name'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_CHART=helm/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - id: set-namespace
        if: env.GHA_HELM_DEPLOY_NAMESPACE == 'repo_name'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_NAMESPACE=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - id: set-values-file
        if: env.GHA_HELM_DEPLOY_VALUES == 'values'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_VALUES=values-kub-ent-${GHA_HELM_DEPLOY_ENV}.yaml" >> $GITHUB_ENV
      - id: set-registry-azure
        if: env.GHA_HELM_DEPLOY_CLOUD_PROVIDER == 'az'
        shell: bash
        run: |
          echo "GHA_HELM_DEPLOY_REGISTRY=acrentur001.azurecr.io/entur" >> $GITHUB_ENV
      - id: set-clustername-az
        name: Set Cluster Name AKS
        shell: bash
        if: inputs.cloud_provider == 'az'
        run: |
          if [ -z "${AZURE_CLUSTER_NAME}" ]; then
            echo "GitHub repository environment variable AZURE_CLUSTER_NAME is not set. Setup using tf-azure-apps. Exiting."
            exit 1
          fi
          echo "GHA_HELM_DEPLOY_CLUSTER_NAME=${AZURE_CLUSTER_NAME}" >> $GITHUB_ENV
      - id: set-clustername-gcp
        name: Set Cluster Name GKE
        shell: bash
        if: inputs.cloud_provider == 'gcp'
        run: |
          if [ -z "${GHA_HELM_DEPLOY_CLUSTER_NAME}" ]; then
            echo "GHA_HELM_DEPLOY_CLUSTER_NAME=kub-ent-${GHA_HELM_DEPLOY_ENVIRONMENT}-001" >> $GITHUB_ENV
          else
            echo "GHA_HELM_DEPLOY_CLUSTER_NAME=${GHA_HELM_DEPLOY_CLUSTER_NAME}" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v4.1.6
      - id: install
        uses: azure/setup-helm@v4
      - uses: entur/gha-meta/.github/actions/cloud-auth@v1
        with:
          environment: ${{ env.GHA_HELM_DEPLOY_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_HELM_DEPLOY_CLOUD_PROVIDER }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          azure_client_id: ${{ env.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ env.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - uses: entur/gha-meta/.github/actions/k8s-auth@v1
        with:
          environment: ${{ env.GHA_HELM_DEPLOY_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_HELM_DEPLOY_CLOUD_PROVIDER }}
          project_id: ${{ inputs.project_id }}
          cluster_name: ${{ env.GHA_HELM_DEPLOY_CLUSTER_NAME }}
          azure_cluster_resource_group: ${{ env.AZURE_CLUSTER_RESOURCE_GROUP }}
      - id: deploy-given-tag
        name: Helm deploy ./${{ env.GHA_HELM_DEPLOY_CHART }}
        shell: bash
        run: |
          helm dependency update ./${GHA_HELM_DEPLOY_CHART}
          if [ "${GHA_HELM_DEPLOY_IMAGE}" != "na" ]; then
            helm upgrade ${GHA_HELM_DEPLOY_RELEASE_NAME} ./${GHA_HELM_DEPLOY_CHART}/ \
              -f ${GHA_HELM_DEPLOY_CHART}/env/${GHA_HELM_DEPLOY_VALUES} \
              --namespace ${GHA_HELM_DEPLOY_NAMESPACE} \
              --set common.container.image=${GHA_HELM_DEPLOY_REGISTRY}/${GHA_HELM_DEPLOY_IMAGE} \
              --install \
              --atomic
          else
            helm upgrade ${GHA_HELM_DEPLOY_RELEASE_NAME} ./${GHA_HELM_DEPLOY_CHART}/ \
              -f ${GHA_HELM_DEPLOY_CHART}/env/${GHA_HELM_DEPLOY_VALUES} \
              --namespace ${GHA_HELM_DEPLOY_NAMESPACE} \
              --install \
              --atomic
          fi
